const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost:27017/Blog', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const blogSchema = new mongoose.Schema({
  topic: { type: String, required: true },
  description: { type: String, required: true },
  posted_at: { type: Date, default: Date.now },
  posted_by: { type: String, required: true },
});

const Blog = mongoose.model('Blog', blogSchema);



npm install express mongoose body-parser











const express = require('express');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// GET /blog?page=&search=
app.get('/blog', async (req, res) => {
  const { page, search } = req.query;
  const regex = new RegExp(search, 'i');
  const skip = (page - 1) * 5;
  const blogs = await Blog.find({ topic: regex })
    .sort({ posted_at: -1 })
    .skip(skip)
    .limit(5);
  res.json({ status: 'success', result: blogs });
});

// POST /blog
app.post('/blog', async (req, res) => {
  const { topic, description, posted_by } = req.body;
  const blog = new Blog({ topic, description, posted_by });
  const savedBlog = await blog.save();
  res.json({ status: 'success', result: savedBlog });
});

// PUT /blog/:id
app.put('/blog/:id', async (req, res) => {
  const { id } = req.params;
  const { topic, description, posted_by } = req.body;
  const updatedBlog = await Blog.findByIdAndUpdate(
    id,
    { topic, description, posted_by },
    { new: true }
  );
  res.json({ status: 'success', result: updatedBlog });
});

// DELETE /blog/:id
app.delete('/blog/:id', async (req, res) => {
  const { id } = req.params;
  const deletedBlog = await Blog.findByIdAndDelete(id);
  res.json({ status: 'success', result: deletedBlog });
});

// Start the server
app.listen(3000, () => {
  console.log('Server started on port 3000');
});

